[build-system]
requires = ["setuptools>=61.0", "wheel"]
build-backend = "setuptools.build_meta"

[project]
name = "mlx-speculative-server"
version = "0.1.0"
description = "High-performance speculative decoding server for Apple Silicon"
readme = "README.md"
license = {text = "MIT"}
authors = [
    {name = "Manus AI", email = "contact@manus.im"}
]
maintainers = [
    {name = "Manus AI", email = "contact@manus.im"}
]
classifiers = [
    "Development Status :: 4 - Beta",
    "Intended Audience :: Developers",
    "Intended Audience :: Science/Research",
    "License :: OSI Approved :: MIT License",
    "Operating System :: MacOS",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.8",
    "Programming Language :: Python :: 3.9",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Topic :: Scientific/Engineering :: Artificial Intelligence",
    "Topic :: Software Development :: Libraries :: Python Modules",
    "Topic :: System :: Distributed Computing",
]
keywords = [
    "mlx",
    "apple-silicon", 
    "llm",
    "language-model",
    "speculative-decoding",
    "inference",
    "serving",
    "vllm",
    "performance",
    "concurrent",
    "batching"
]
requires-python = ">=3.8"
dependencies = [
    "mlx>=0.0.1",
    "mlx-lm>=0.0.1",
    "fastapi>=0.100.0",
    "uvicorn[standard]>=0.20.0",
    "pydantic>=2.0.0",
    "numpy>=1.21.0",
    "transformers>=4.30.0",
    "requests>=2.28.0",
]

[project.optional-dependencies]
dev = [
    "pytest>=7.0.0",
    "pytest-asyncio>=0.21.0",
    "pytest-cov>=4.0.0",
    "black>=23.0.0",
    "flake8>=6.0.0",
    "isort>=5.12.0",
    "mypy>=1.0.0",
    "coverage>=7.0.0",
]
perf = [
    "psutil>=5.9.0",
    "memory-profiler>=0.60.0",
]
all = [
    "mlx-speculative-server[dev,perf]"
]

[project.urls]
Homepage = "https://github.com/yourusername/mlx-speculative-server"
Repository = "https://github.com/yourusername/mlx-speculative-server"
Documentation = "https://github.com/yourusername/mlx-speculative-server#readme"
"Bug Tracker" = "https://github.com/yourusername/mlx-speculative-server/issues"

[project.scripts]
mlx-speculative = "mlx_speculative.cli:main"
mlx-spec-server = "mlx_speculative.server_v2:run_enhanced_server"

[tool.setuptools.packages.find]
exclude = ["tests*"]

[tool.setuptools.package-data]
mlx_speculative = ["*.json", "*.yaml", "*.yml"]

[tool.black]
line-length = 100
target-version = ['py38', 'py39', 'py310', 'py311']
include = '\.pyi?$'
extend-exclude = '''
/(
  # directories
  \.eggs
  | \.git
  | \.hg
  | \.mypy_cache
  | \.tox
  | \.venv
  | build
  | dist
)/
'''

[tool.isort]
profile = "black"
line_length = 100
multi_line_output = 3
include_trailing_comma = true
force_grid_wrap = 0
use_parentheses = true
ensure_newline_before_comments = true

[tool.flake8]
max-line-length = 100
extend-ignore = ["E203", "W503"]
exclude = [
    ".git",
    "__pycache__",
    "build",
    "dist",
    ".eggs",
    "*.egg-info",
    ".venv",
    ".tox"
]

[tool.mypy]
python_version = "3.8"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = false
disallow_incomplete_defs = false
check_untyped_defs = true
disallow_untyped_decorators = false
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_no_return = true
warn_unreachable = true
strict_equality = true

[[tool.mypy.overrides]]
module = [
    "mlx.*",
    "transformers.*",
    "uvicorn.*",
]
ignore_missing_imports = true

[tool.pytest.ini_options]
testpaths = ["tests"]
python_files = ["test_*.py"]
python_classes = ["Test*"]
python_functions = ["test_*"]
addopts = [
    "--verbose",
    "--tb=short",
    "--strict-markers",
    "--disable-warnings",
    "--color=yes"
]
markers = [
    "unit: Unit tests",
    "integration: Integration tests", 
    "performance: Performance tests",
    "slow: Slow tests that may take a long time",
    "model_dependent: Tests that require actual models",
    "gpu: Tests that require GPU/Metal",
    "network: Tests that require network access"
]
filterwarnings = [
    "ignore::DeprecationWarning",
    "ignore::PendingDeprecationWarning",
    "ignore::UserWarning:mlx.*"
]

[tool.coverage.run]
source = ["mlx_speculative"]
omit = [
    "*/tests/*",
    "*/test_*",
    "setup.py"
]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if self.debug:",
    "if settings.DEBUG",
    "raise AssertionError",
    "raise NotImplementedError",
    "if 0:",
    "if __name__ == .__main__.:",
    "class .*\\bProtocol\\):",
    "@(abc\\.)?abstractmethod"
]
